#include "Lexer.h"#include <iostream>#include <fstream>#include <sstream>#include "Parser.h"#include "Tuple.h"#include "Relation.h"#include "Database.h"#include "Interpreter.h"using namespace std;int main(int argc, char* argv[]) {    //////OPEN FILE AND PROCESS IT INTO "bigInputString" FOR LATER USE//////    string fileName = argv[1];    string bigInputString ="";    ifstream inputFile;    inputFile.open(fileName);    if(inputFile.is_open()) {        stringstream inputStringStream;        inputStringStream << inputFile.rdbuf();        inputFile.close();        bigInputString = inputStringStream.str();    }    else { cout << "ERROR OPENING FILE" << endl; return -1; }    Lexer* lexer = new Lexer();    lexer->Run(bigInputString);    vector<Token*> tokenVector = lexer->getTokenVector();    Parser* parser = new Parser(tokenVector);    DatalogProgram program = parser->parse();    if (program.isProgramValid()) {        cout << program.fullProgramToString();    }    cout << "Wahoo!" << endl;    delete lexer;    vector<string> headerVector;    headerVector.push_back("Park Name");    headerVector.push_back("State");    headerVector.push_back("Dallin Rating");    vector<string> glcaVector;    glcaVector.push_back("Glen Canyon");    glcaVector.push_back("Utah");    glcaVector.push_back("Most Epic");    Tuple glca(glcaVector);    vector<string> archVector;    archVector.push_back("Arches");    archVector.push_back("Utah");    archVector.push_back("Pretty Dank");    Tuple arch(archVector);    vector<string> ysmeVector;    ysmeVector.push_back("Yosemite");    ysmeVector.push_back("Cali");    ysmeVector.push_back("Mike Quintana");    Tuple ysme(ysmeVector);    vector<string> gbvlVector;    gbvlVector.push_back("Goblin Valley");    gbvlVector.push_back("Utah");    gbvlVector.push_back("Spooky");    Tuple gbvl(gbvlVector);    Relation* parks = new Relation("Parks", headerVector);    parks->addTuple(glca);    parks->addTuple(arch);    parks->addTuple(ysme);    cout << "good morning city" << endl;    cout << endl << endl<< endl<< endl<< parks->toString() << endl;    Database* sam = new Database();    sam->addTable("Parks", parks);    cout << "Original" << endl << sam->getRelation("Parks")->toString() << endl;    Relation copy = sam->getRelationCopy("Parks");    cout << "Copy" << endl << copy.toString() << endl;    copy.addTuple(gbvl);    cout << "Original" << endl << sam->getRelation("Parks")->toString() << endl;    cout << "Modified Copy" << endl << copy.toString() << endl;    Interpreter gwilliam(program);    gwilliam.interpretSchemes();    gwilliam.interpretFacts();    cout << gwilliam.getDataBaseString() << endl;    return 0;}